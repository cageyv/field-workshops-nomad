#!/bin/bash -l

# Write out jenkins.nomad job to cloud-client
cat <<-EOF > /root/nomad/jenkins.nomad
job "jenkins" {
  type = "service"
  datacenters = ["dc1"]

  group "web" {
    count = 1

    ephemeral_disk {
      migrate = true
      size    = "110"
      sticky  = true
    }

    task "frontend" {
      driver = "java"

      env {
        # Use ephemeral storage for Jenkins data.
        JENKINS_HOME = "/alloc/data"
        JENKINS_SLAVE_AGENT_PORT = "\${NOMAD_PORT_slave}"
      }

      config {
        jar_path    = "local/jenkins.war"
        jvm_options = ["-Xmx768m", "-Xms384m"]
        args        = ["--httpPort=\${NOMAD_PORT_http}"]
      }

      artifact {
        source = "http://ftp-chi.osuosl.org/pub/jenkins/war/2.253/jenkins.war"
        options {
          checksum = "sha256:d99c51292349af4934ab9769ba9ef2ed9ab9a8b118ff601aaabf1d5bf2a4e6a1"
        }
      }

      service {
        port = "http"
        name = "jenkins"

        check {
          type     = "http"
          path     = "/login"
          interval = "10s"
          timeout  = "2s"
        }
      }

      resources {
        cpu    = 2000 # MHz
        memory = 1024 # MB
        network {
          mbits = 100
          port "http" {}
          port "slave" {}
        }
      }
    }
  }
}
EOF

# SCP jenkins.nomad to nomad-server-1
sshpass -e scp /root/nomad/jenkins.nomad hashistack@$nomad_server_ip:c:\\Users\\hashistack\\nomad\\jenkins.nomad

# Write the iss.nomad job to cloud-client
cat <<-EOF > /root/nomad/iis.nomad
job "iis" {
  datacenters = ["dc1"]
  type        = "service"

  constraint {
    attribute = "\${attr.kernel.name}"
    value = "windows"
  }

  group "iis" {
    count = 1

    network {
      port "http" {
        static = 8000
        to = 80
      }
    }

    service {
      name = "iis"
      tags = ["windows", "iis"]
      port = "http"
      check_restart {
        grace = "600s"
      }
    }

    task "iis" {
      driver = "docker"

      config {
        image = "https://mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019"
        ports = ["http"]
      }

      resources {
        cpu = 2000 # Mhz
        memory = 2048 # MB
      }
    }
  }
}
EOF

# SCP iis.nomad to nomad-server-1
sshpass -e scp /root/nomad/iis.nomad hashistack@$nomad_server_ip:c:\\Users\\hashistack\\nomad\\iis.nomad

# Write batchjob.nomad to cloud-client
cat <<-EOF > /root/nomad/batchjob.nomad
job "batchjob" {
  datacenters = ["dc1"]
  type = "batch"

  constraint {
    attribute = "\${attr.kernel.name}"
    value     = "windows"
  }

  # to dispatch this job use `nomad job dispatch -meta TTL=60 batchjob`
  parameterized {
    #TTL is the amount of time this batch job will run for before it gets terminated
    meta_required = ["TTL"]
  }

  group "dotnet-batch" {
    count = 1

    task "callexe" {

      driver = "raw_exec"

      config {
        command = "powershell.exe"
        args = ["local/runbatch.ps1   \${NOMAD_META_TTL}"]
      }

      artifact {
        source   = "git::https://github.com/GuyBarros/dotnet-batch-service"
        destination = "local/repo"
      }

      template {
        data = <<EOH
        param(
        \$TTL
        )
        start local/repo/dotnet-batch-service.exe
        ping 127.0.0.1 -n \$TTL
        taskkill /im dotnet-batch-service.exe /f
        EOH
        destination = "local/runbatch.ps1"
      }

      resources {
        cpu    = 500 # MHz
        memory = 512 # MB
      }
    }
  }
}
EOF

# SCP batchjob.nomad to nomad-server-1
sshpass -e scp /root/nomad/batchjob.nomad hashistack@$nomad_server_ip:c:\\Users\\hashistack\\nomad\\batchjob.nomad

exit 0
