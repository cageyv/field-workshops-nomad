slug: nomad-acls
id: vlqq3najdjpp
type: track
title: Nomad Access Control Lists (ACLs)
teaser: Learn how to control access to Nomad with Access Control Lists (ACLs).
description: |-
  Nomad is a flexible workload orchestrator that enables an organization to easily deploy and manage any containerized or legacy application using a single, unified workflow. Nomad can run a diverse workload of Docker, non-containerized, microservice, and batch applications.

  This track will show you how to control access to Nomad with Access Control Lists (ACLs).

  Before running this track, we suggest you run the [Nomad Basics](https://instruqt.com/hashicorp/tracks/nomad-basics), [Nomad Simple Cluster](https://instruqt.com/hashicorp/tracks/nomad-simple-cluster), and [Nomad Multi-Server Cluster](https://instruqt.com/hashicorp/tracks/nomad-multi-server-cluster) tracks.
icon: https://storage.googleapis.com/instruqt-hashicorp-tracks/logo/nomad.png
tags:
- nomad
- security
- acls
owner: hashicorp
developers:
- lhaig@hashicorp.com
- roger@hashicorp.com
private: true
published: true
challenges:
- slug: run-the-servers-and-clients
  id: 5efmxtpkfxlm
  type: challenge
  title: Run the Nomad Servers and Clients
  teaser: Configure and run three Nomad servers and 2 Nomad clients.
  assignment: |-
    Before we begin securing our Nomad cluster, lets verify that all 3 servers and both clients are running. Check the servers with this command on the "Server 1" tab:
    ```
    nomad server members
    ```
    You should see 3 servers that are all alive. server1 should be the leader.

    Then check the client nodes with this command on the "Server 1" tab:
    ```
    nomad node status
    ```
    You should see two client nodes.

    In the next challenge, you will configure ACLs for the Nomad cluster.
  notes:
  - type: text
    contents: |-
      In this track, you'll learn how to control access to Nomad with Access Control Lists (ACLs).

      The first challenge will run 3 Nomad servers and 2 Nomad clients for you. All you'll need to do is check that they are running.

      In the second and third challenges, you will configure and then use Nomad ACLs.
  - type: text
    contents: |-
      We've already started a cluster with three servers and two clients for you.

      We've put all the server and client configuration files on the server1 VM so that you can conveniently see them in a single Instruqt tab. However, if you decide to edit any of the configuration files for any reason, be sure to do so on the tab that matches the file you change.
  tabs:
  - title: Config Files
    type: code
    hostname: nomad-server-1
    path: /root/nomad/
  - title: Server 1
    type: terminal
    hostname: nomad-server-1
  - title: Server 2
    type: terminal
    hostname: nomad-server-2
  - title: Server 3
    type: terminal
    hostname: nomad-server-3
  - title: Client 1
    type: terminal
    hostname: nomad-client-1
  - title: Client 2
    type: terminal
    hostname: nomad-client-2
  - title: Nomad UI
    type: service
    hostname: nomad-server-1
    port: 4646
  difficulty: basic
  timelimit: 1800
- slug: configure-server-acls
  id: rfb3dvxmxuyp
  type: challenge
  title: Configure Nomad Server ACLs
  teaser: Configure Nomad Server ACLs.
  assignment: |-
    The APIs needed to manage policies and tokens are not enabled until ACLs are enabled.
    We need to enable the ACL configuration for our cluster

    Let's start by configiuring ACLs in our Nomad Servers first.

    To do this we need to enable acl in the acl stanza of each server file. Go to each `Server Config` tab and add the following section to the end of the file, below the server stanza.
    ```
    acl {
      enabled = true
    }
    ```
    In a multi-region configuration you will need to add the ```authoritative_region``` configuration to the server stanza. Since we only have one region this is not strictly nessesary. We will however make the change to make it clear how it should look.

    Lets add this configuration now.

    For each server open the `Server Config` tab and edit the server stanza to look like this.

    ```
    server {
      enabled = true

      # Self-elect, should be 3 or 5 for production
      bootstrap_expect = 3
      authoritative_region = "global"
    }
    ```
    Now we need to restart the nomad servers one at a time. Complete the following steps for each server.
    ```
    systemctl restart nomad
    ```
    If you run the ``` nomad server members ``` command in the `Server 1` Tab what is the result?

    If everything is configured correctly you will get an access denied error.
    This is the expected behavior as Nomad ACLs is `Deny by default`. We will be fixing this in a later challenge.

    In the next challenge, you will configure the nomad client servers for utilizing ACLs.
  notes:
  - type: text
    contents: |-
      In this challenge, you will configure the Nomad Servers for utilizing ACLs.

      In the second challenge, you will configure the Nomad Clients for utilizing ACLs.
  tabs:
  - title: Server 1 Config
    type: code
    hostname: nomad-server-1
    path: /etc/nomad.d/server1.hcl
  - title: Server 1
    type: terminal
    hostname: nomad-server-1
  - title: Server 2 Config
    type: code
    hostname: nomad-server-2
    path: /etc/nomad.d/server2.hcl
  - title: Server 2
    type: terminal
    hostname: nomad-server-2
  - title: Server 3 Config
    type: code
    hostname: nomad-server-3
    path: /etc/nomad.d/server3.hcl
  - title: Server 3
    type: terminal
    hostname: nomad-server-3
  - title: Nomad UI
    type: service
    hostname: nomad-server-1
    port: 4646
  difficulty: basic
  timelimit: 1800
- slug: configure-client-acls
  id: ncufcvo3ycxz
  type: challenge
  title: Configure Nomad Client ACLs
  teaser: Configure Nomad Client ACLs.
  assignment: |-
    Now that we have the servers using ACLs we need to configure the Clients to use them as well.

    Let's get started.

    We need to enable acl in the acl stanza of each client file. Go to each client node config tab and add the following section to the end of the file, below the client stanza.
    ```
    acl {
      enabled = true
    }
    ```
    That is all configuration that needs to be done.

    Now you need to restart the nomad clients one at a time as we did for the servers. Complete the following steps for each server.
    ```
    systemctl restart nomad
    ```
    After you have restarted the Nomad Agents we need to make sure that they have joined the cluster again.

    If you run the following command in the `Server1` tab.
    ```
    nomad node status
    ```
    You will see the same error that we recieved when we tried to check the server status earlier.

    In the next challemge we will bootstrap the cluster ACL API and create our first management token

  notes:
  - type: text
    contents: |-
      In this challenge, you will configure the Nomad Clients for utilizing ACLs.

      In the next challenge, you will bootstrap the Nomad Cluster ACLs.
  tabs:
  - title: Server 1
    type: terminal
    hostname: nomad-server-1
  - title: Client 1 Config
    type: code
    hostname: nomad-client-1
    path: /etc/nomad.d/client1.hcl
  - title: Client 1
    type: terminal
    hostname: nomad-client-1
  - title: Client 2 Config
    type: code
    hostname: nomad-client-2
    path: /etc/nomad.d/client2.hcl
  - title: Client 2
    type: terminal
    hostname: nomad-client-2
  - title: Nomad UI
    type: service
    hostname: nomad-server-1
    port: 4646
  difficulty: basic
  timelimit: 1800
- slug: bootstrap-acls
  type: challenge
  title: Bootstrap Nomad ACLs
  teaser: Bootstrap Nomad ACLs.
  assignment: |-
    Now that we have the servers using ACLs we need to configure the Clients to use them as well.

    Let's configiure ACLs in our Nomad Clients.

    We need to enable acl in the acl stanza of each server file. Go to each node config tab and add the following section to the end of the file, below the server stanza.
    ```
    acl {
      enabled = true
    }
    ```
    That is all that needs to be done.

    Now we need to restart the nomad clients one at a time. Complete the following steps for each server.
    ```
    systemctl restart nomad
    ```
    After we have restarted the servers we need to make that they have joined the cluster again.

    Run the following command to make sure.
    ```
    nomad server members
    ```
    You will see an error as by default Nomad ACL is in a deny state which denies all access.

    To enable us to query the API again to see the status of our cluster we need to allow access for our client to the API.

    Enabling the

    You should see 3 servers that are all alive. There should be a new leader since we restarted Server 1.

    In the next challenge, you wil see how the Nomad ACLs restrict what different users can do in Nomad.
  notes:
  - type: text
    contents: |-
      In this challenge, you will configure the Nomad Clients for utilizing ACLs.

      In the third and final challenge, you will see how the ACLs restrict what different users can do in Nomad.
  tabs:
  - title: Server 1
    type: terminal
    hostname: nomad-server-1
  - title: Client 1 Config
    type: code
    hostname: nomad-client-1
    path: /etc/nomad.d/client1.hcl
  - title: Client 1
    type: terminal
    hostname: nomad-client-1
  - title: Client 2 Config
    type: code
    hostname: nomad-client-2
    path: /etc/nomad.d/client2.hcl
  - title: Client 2
    type: terminal
    hostname: nomad-client-2
  - title: Nomad UI
    type: service
    hostname: nomad-server-1
    port: 4646
  difficulty: basic
  timelimit: 1800
- slug: use-acls
  id: 2dzqorlvompb
  type: challenge
  title: Use Nomad ACLs
  teaser: See how Nomad ACLs restrict what different users can do in Nomad.
  assignment: |-
    Now, let's see the Nomad ACLs in action.

    First, do the following ...

    Congratulations on finishing the Nomad ACLs track!
  notes:
  - type: text
    contents: |-
      In this final challenge, you will see how the ACLs restrict what different users can do in Nomad.

      Blah Blah
  tabs:
  - title: Config Files
    type: code
    hostname: nomad-server-1
    path: /root/nomad/
  - title: Server 1
    type: terminal
    hostname: nomad-server-1
  - title: Server 2
    type: terminal
    hostname: nomad-server-2
  - title: Server 3
    type: terminal
    hostname: nomad-server-3
  - title: Client 1
    type: terminal
    hostname: nomad-client-1
  - title: Client 2
    type: terminal
    hostname: nomad-client-2
  - title: Nomad UI
    type: service
    hostname: nomad-server-1
    port: 4646
  difficulty: basic
  timelimit: 1800
checksum: "9347072234268902856"
