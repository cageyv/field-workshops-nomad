slug: nomad-simple-cluster
id: phqbclfchv0u
type: track
title: Nomad Simple Cluster
teaser: Learn how to run a simple Nomad cluster with one server and two clients.
description: |-
  Nomad is a flexible workload orchestrator that enables an organization to easily deploy and manage any containerized or legacy application using a single, unified workflow. Nomad can run a diverse workload of Docker, non-containerized, microservice, and batch applications.

  This track will show you how to run a simple Nomad cluster with one server and two clients. It will also show you how to run a Nomad job and check the status of the nodes and the job.

  Before running this track, we suggest you run the [Nomad Basics](https://instruqt.com/hashicorp/tracks/nomad-basics) track.
icon: https://storage.googleapis.com/instruqt-hashicorp-tracks/logo/nomad.png
tags:
- nomad
- cluster
owner: hashicorp
developers:
- marc@hashicorp.com
- roger@hashicorp.com
private: true
published: true
challenges:
- slug: run-the-server-and-clients
  id: ykhcz4xjgdfi
  type: challenge
  title: Run the Nomad Server and 2 Clients
  teaser: Configure and run the Nomad server and 2 Nomad clients.
  assignment: |-
    Let's start by looking at the `server.hcl` configuration file on the "Config Files" tab on the left. You'll see that we are calling the server node `server`, configuring the agent as a server, and indicating that we expect one server in the cluster.

    Next, start the Nomad server in the background on the "Server" tab by running:
    ```
    cd nomad
    nomad agent -config server.hcl > nomad.log 2>&1 &
    ```
    You should see a single line like `[1] 2174`, which gives the PID of the Nomad server. If you want, you can inspect the nomad.log file by running `cat nomad.log`. This will show
    many messages including one that says "Nomad agent started!"

    Back on the "Configuration Files" tab, look at the `client1.hcl` configuration file. It assigns the name `client1` to the first client, configures it as a Nomad client, and tells it to connect to the server using the DNS name assigned to it by the Instruqt track's configuration file, `nomad-server`.

    Now, start the first Nomad client in the background on the "Client 1" tab by running:
    ```
    cd nomad
    nomad agent -config client1.hcl > nomad.log 2>&1 &
    ```
    You should see a single line like `[1] 2241`, which gives the PID of the first client. As with the server, you can inspect the nomad.log file by running `cat nomad.log`. This will show many messages including one that says "Nomad agent started!"

    Back on the "Configuration Files" tab, look at the `client2.hcl` configuration file. It is almost the same as `client1.hcl`, but assigns the name of the agent to be `client2` instead of `client1`.

    Now, start the second Nomad client in the background on the "Client 2" tab by running:
    ```
    cd nomad
    nomad agent -config client2.hcl > nomad.log 2>&1 &
    ```
    You should see a single line like `[1] 2065`, which gives the PID of the second client. As with the server and first client, you can inspect the nomad.log file by running `cat nomad.log`.

    On the "Server" tab, check the list of Nomad servers in your cluster:
    ```
    nomad server members
    ```
    You should see a single server.

    If clicking the Check button at the end of the challenge says you have not done this, you might have run it on one of the other tabs. Please run it again on the "Server" tab so that it will end up in your .bash_history file on that VM.

    Still on the "Server" tab, check the list of Nomad client nodes:
    ```
    nomad node status
    ```
    You should see two client nodes. (The command only shows client nodes, so the server is not listed.)

    If clicking the Check button at the end of the challenge says you have not done this, you might have run it on one of the other tabs. Please run it again on the "Server" tab so that it will end up in your .bash_history file on that VM.

    You can now inspect the server and clients in the Nomad UI. You might initially see a "Server Error" message in the UI saying that "A server error prevented data from being sent to the client".  Just click on the "Go to Clients" button. You should then see the UI and can inspect the server and clients that you started. Of course, you won't see any jobs yet. You will start one in the next challenge.
  notes:
  - type: text
    contents: |-
      The open source version of Nomad (Nomad OSS) is a single binary that you can download and run on your laptop or virtual workstation.

      It can run as a server or as a client. In this track, you'll run one server and two clients and then launch a job to them.

      You can always download the latest version of Nomad OSS here:
      https://www.nomadproject.io/downloads.html
  - type: text
    contents: |-
      We've put all the server and client configuration files on the server1 VM so that you can conveniently see them in a single Instruqt tab.

      However, if you decide to edit either of the client configuration files for any reason, be sure to do so on the client tab that matches the file you change.
  tabs:
  - title: Config Files
    type: code
    hostname: nomad-server
    path: /root/nomad/
  - title: Server
    type: terminal
    hostname: nomad-server
  - title: Client 1
    type: terminal
    hostname: nomad-client-1
  - title: Client 2
    type: terminal
    hostname: nomad-client-2
  - title: Nomad UI
    type: service
    hostname: nomad-server
    port: 4646
  difficulty: basic
  timelimit: 1800
- slug: run-first-job
  id: gpvvzswsnxfg
  type: challenge
  title: Create Your First Nomad Job
  teaser: Initialize a new Nomad job specification file to define the resources.
  assignment: |-
    ## Create New Job File
    In this challenge, you will initialize a new Nomad job and then run it. First, run the following init command under the Server Window to generate the sample job specification file called example.nomad:

    ```
    cd nomad
    nomad job init -short
    ```

    This will generate a short or minimal job specification for our challenge. You may also run the this without the `-short` option to have a complete job spec that includes the comments for each section.

    ## Review the newly created file
    Click on the Job Spec directory and review the newly created example.nomad. The init file creates a sample specification to deploy a simple redis docker image\nthat demonstrates some common configurations for tasks, task groups, runtime constraints, and resource allocation.

    The job specification is specified in HCL, which aims to strike a balance between human readable and editable, and machine-friendly.
  notes:
  - type: text
    contents: The Nomad job specification (or "jobspec" for short) defines the schema
      for Nomad jobs. Nomad jobs are specified in HCL, which aims to strike a balance
      between human readable and editable, and machine-friendly.
  - type: text
    contents: The Nomad job specification allows operators to specify a schema for
      all aspects of running the job. This includes tasks, images, deployment strategy,
      resources, priorities, constraints, service registrations, secrets, and other
      information required to deploy the workload.
  tabs:
  - title: Job Spec
    type: code
    hostname: nomad-server
    path: /root/nomad/
  - title: Server
    type: terminal
    hostname: nomad-server
  - title: Nomad UI
    type: service
    hostname: nomad-server
    port: 4646
  difficulty: basic
  timelimit: 1800
- slug: submit-your-first-nomad-job
  id: ice2jakx6ja1
  type: challenge
  title: Submit Your First Nomad Job
  teaser: Plan and Sumbit an sample Nomad Job
  assignment: |-
    To get started, we are going to use the example file example.nomad which you can see open in the editor window.  In this example job file, we have declared a single task 'redis' which is using the Docker driver to run the task.
    The primary way you interact with Nomad is with the run command. The run command takes a job file and registers it with Nomad. This is used both to register new jobs and to update existing jobs.

    We can register our example job now:
    ```
    cd nomad
    nomad run example.nomad
    ```
  notes:
  - type: text
    contents: In Nomad, the description of the job and all its requirements are maintained
      in a single file called the "job file". This job file resides locally on disk
      and it is highly recommended that you check job files into source control.
  - type: text
    contents: 'The general flow for submitting a job in Nomad is: 1. Author a job
      file according to the job specification 2. Plan and review changes with a Nomad
      server and 3. Submit the job file to a Nomad server'
  tabs:
  - title: Config Files
    type: code
    hostname: nomad-server
    path: /root/nomad/
  - title: Server
    type: terminal
    hostname: nomad-server
  - title: Nomad UI
    type: service
    hostname: nomad-server
    port: 4646
  difficulty: basic
  timelimit: 300
- slug: reviewing-a-job-deployment
  id: 6fl6jt4czeqc
  type: challenge
  title: Reviewing a Job Deployment
  teaser: Inspect and Evaluate a Job Deployment
  assignment: |-
    After a job is submitted, you can query the status of that job using the job status command:

    ```
    cd nomad
    nomad job status example
    ```

    ```
    nomad job status -evals example
    ```

    `nomad eval status <Evaluation ID>`

    `nomad alloc-status <Allocation ID>`
    ```

    ```
    nomad logs <Evaluation ID> redis
    ```


    Here we can see that the result of our evaluation was the creation of a single task running in
    its own allocation.
  notes:
  - type: text
    contents: |-
      A successful job submission is not an indication of a successfully-running
      job. This is the nature of a highly-optimistic scheduler. A successful job submission
      means the server was able to issue the proper scheduling commands. It does not
      indicate the job is actually running. To verify the job is running, we need
      to inspect its state.
  tabs:
  - title: Config Files
    type: code
    hostname: nomad-server
    path: /root/nomad/
  - title: Server
    type: terminal
    hostname: nomad-server
    path: /root/nomad/
  - title: Nomad UI
    type: service
    hostname: nomad-server
    port: 4646
  difficulty: basic
  timelimit: 300
- slug: modifying-a-job
  id: qfn6u9nh1mrj
  type: challenge
  title: Modifying a Job
  teaser: Change the resources in an existing job deployment
  assignment: |-
      ## Modify the jobspec file (example.nomad)
      Let's edit the example.nomad file to update the count and set it to 3. Between the `group` and `task` stanza:
      ```
      group "cache" {
        task "redis" {
      ```
      Insert a line by adding `count = 3` property to increase the number of deployed redis tasks from 1 to 3.

      ## Run a Plan on the new updates
      Once you have finished modifying the job specification, use the plan command to invoke a dry-run of the scheduler to see what would happen if you ran the updated job:
      ```
      nomad plan example.nomad
      ```
      We can see that the scheduler detected the change in count and informs us that it will cause 2 new instances to be created. The in-place update that will occur is to push the update job specification to the existing allocation and will not cause any service interruption. We can then run the job with the run command the plan emitted.
      ## Run the Job to apply the updates
      After running the plan, check if the dry-run is successful to see if there's enough resources for the changes. If it completes, then we're ready to apply the updates!
      ```
      nomad run -check-index <replace this with check-index number> example.nomad
      ```
      By using the `nomad run` command with the `check-index` option from the previous plan output, we can see that additional allocations
  notes:
  - type: text
    contents: |-
      The definition of a job is not static, and is meant to be updated over time. You may update a job to change the docker container, to update the application version, or to change the count of a task group to scale with load.
  tabs:
  - title: Config Files
    type: code
    hostname: nomad-server
    path: /root/nomad/
  - title: Server
    type: terminal
    hostname: nomad-server
  - title: Nomad UI
    type: service
    hostname: nomad-server
    path: /root/nomad/
    port: 4646
  difficulty: basic
  timelimit: 300
- slug: stopping-a-job
  id: rmve1ekxvtej
  type: challenge
  title: Stopping a Job
  teaser: Stop a running job and clean-up deployed
  assignment: |-
    The assignment the participant needs to complete in order to proceed.

    You can use any GitHub flavoured markdown.
  notes:
  - type: text
    contents: Replace this text with your own text
  tabs:
  - title: Config Files
    type: code
    hostname: nomad-server
    path: /root/nomad/
  - title: Server
    type: terminal
    hostname: nomad-server
    path: /root/nomad/
  - title: Nomad UI
    type: service
    hostname: nomad-server
    port: 4646
  difficulty: basic
  timelimit: 300
checksum: "13905452458109407450"
